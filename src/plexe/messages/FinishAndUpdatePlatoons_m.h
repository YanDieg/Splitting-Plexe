//
// Generated file, do not edit! Created by nedtool 5.6 from plexe/messages/FinishAndUpdatePlatoons.msg.
//

#ifndef __FINISHANDUPDATEPLATOONS_M_H
#define __FINISHANDUPDATEPLATOONS_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef PLEXE_API
#  if defined(PLEXE_EXPORT)
#    define PLEXE_API  OPP_DLLEXPORT
#  elif defined(PLEXE_IMPORT)
#    define PLEXE_API  OPP_DLLIMPORT
#  else
#    define PLEXE_API
#  endif
#endif



// cplusplus {{
#include "ManeuverMessage_m.h"
// }}

/**
 * Class generated from <tt>plexe/messages/FinishAndUpdatePlatoons.msg:30</tt> by nedtool.
 * <pre>
 * // Advert that an abort is necessary.
 * // Is sent from a member to others.
 * packet FinishAndUpdatePlatoons extends ManeuverMessage
 * {
 *     int idNewPlatoon;
 *     int newFormation[];
 * }
 * </pre>
 */
class PLEXE_API FinishAndUpdatePlatoons : public ::ManeuverMessage
{
  protected:
    int idNewPlatoon;
    int *newFormation; // array ptr
    unsigned int newFormation_arraysize;

  private:
    void copy(const FinishAndUpdatePlatoons& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const FinishAndUpdatePlatoons&);

  public:
    FinishAndUpdatePlatoons(const char *name=nullptr, short kind=0);
    FinishAndUpdatePlatoons(const FinishAndUpdatePlatoons& other);
    virtual ~FinishAndUpdatePlatoons();
    FinishAndUpdatePlatoons& operator=(const FinishAndUpdatePlatoons& other);
    virtual FinishAndUpdatePlatoons *dup() const override {return new FinishAndUpdatePlatoons(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getIdNewPlatoon() const;
    virtual void setIdNewPlatoon(int idNewPlatoon);
    virtual void setNewFormationArraySize(unsigned int size);
    virtual unsigned int getNewFormationArraySize() const;
    virtual int getNewFormation(unsigned int k) const;
    virtual void setNewFormation(unsigned int k, int newFormation);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FinishAndUpdatePlatoons& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FinishAndUpdatePlatoons& obj) {obj.parsimUnpack(b);}


#endif // ifndef __FINISHANDUPDATEPLATOONS_M_H

